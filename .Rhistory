ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 1,min=1,max=2),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
covariates = input$cov
figuredata<-falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==covariates & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
output$plot <- renderPlot(
ggplot(figuredata,aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 1,min=1,max=2),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
covariates = reactive({input$cov})
covariates=covariates()
figuredata<-falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==covariates & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
output$plot <- renderPlot(
ggplot(figuredata,aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 1,min=1,max=2),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
covariat = reactive({input$cov})
covariates=covariat()
figuredata<-falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==covariates & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
output$plot <- renderPlot(
ggplot(figuredata,aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 1,min=1,max=2),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==input$cov & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=4),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
numericInput(inputId = "sample",label = "How big should the sample be",value = 200,min=200,max=250),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==input$sample & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
numericInput(inputId = "sample",label = "How big should the sample be",value = 200,min=150,max=300,step = 50),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==input$sample & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
numericInput(inputId = "sample",label = "How big should the sample be",value = 200,min=150,max=300,step = 50),
plotOutput("plot")  # Inside the sidebarLayout, add a mainPanel
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==input$sample & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
titlePanel("FPP and FPR"),
sidebarLayout(
sidebarPanel(
p("This application will let you play around with different types of flexibilities to see how this affect the FPP and FPR"),
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
numericInput(inputId = "sample",label = "How big should the sample be",value = 200,min=150,max=300,step = 50))),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==input$sample & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/Results.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
titlePanel("FPP and FPR"),
sidebarLayout(
sidebarPanel(
p("This application will let you play around with different types of flexibilities to see how this affect the FPP and FPR"),
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
numericInput(inputId = "sample",label = "How big should the sample be",value = 200,min=150,max=300,step = 50))),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==input$sample & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(falsepostive)
runApp()
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/dataShiny.csv",sep=";")
runApp()
runApp()
library(shiny)
library(ggplot2)
library(data.table)
falsepostive = fread("C:/Users/Jacob Dalgaard/Documents/GitHub/P-hacking-sim/R/shiny/Data/dataShiny.csv",sep=";")
## Figures for paper ##
ui <- fluidPage(
titlePanel("FPP and FPR"),
sidebarLayout(
sidebarPanel(
p("This application will let you play around with different types of flexibilities to see how this affect the FPP and FPR"),
#selectInput("choice1","Select if you want over a range of sample size or just one specefic sample"),
numericInput(inputId = "cov",label = "Number of covariates",value = 2,min=2,max=3),
numericInput(inputId = "sample",label = "How big should the sample be",value = 200,min=150,max=300,step = 50),
selectInput("outlier",label = "Choose to use outlier criteria or not",c("Use outlier criteira" = "TRUE","Don't use outlier criteria"="FALSE")),
selectInput("dv",label = "Choose to use multiple dependent variables",c("Use three dependent variables plus the average of them" = "1","Use one dependent variable"="2")),
selectInput("type","Type of data that should be used",c("Normal"="h1=Normal, Co=Normal","Bin"="h1=Binary, Co=Binary","NormalBin"="h1=Normal, Co=Binary","BinNormal"="h1=Binary, Co=Normal"))),
mainPanel(
plotOutput("plot"))
)
)
server <- function(input, output) {
figuredata<-reactive({falsepostive[falsepostive$SampleSize==input$sample & falsepostive$OutlierExclusion==input$outlier & falsepostive$IndependentVariables==(input$cov-1) & falsepostive$Correlation==0.2 & falsepostive$DV==input$dv
& falsepostive$Type==input$type,]
})
output$plot <- renderPlot(
ggplot(figuredata(),aes(x=Set))+
geom_bar(aes(x=Set,y=Pr, fill = "FPP"), stat = "identity",position="dodge")+
geom_bar(aes(x=Set,y=FPR, fill = "FPR"), stat = "identity",position="dodge")+
scale_fill_manual(values=c("black","red"))+
facet_grid(Type~Main)+
xlab("Model set")+
ylab("Probability")+
ylim(0,1)+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 65, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 14, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
strip.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
strip.text.y = element_text(color = "grey20", size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain"))
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Set output directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
output = dirname(dirname(getwd()))
output=paste0(output,"/Result")
library(data.table)
library(ggplot2)
library(jtools)
library(ggpubr)
library(Rmisc)
library(xtable)
##Load the data
fileplace=paste0(output,"/Files/ResultsSim.csv")
finalresults = fread(fileplace,sep=";")
## Figures for paper ##
## Make the false positve data
falsepositverateData<-as.data.table(finalresults)
falsepositverateData<-falsepositverateData[falsepositverateData$Power2==1 & falsepositverateData$Power3==2 & falsepositverateData$Power12==2 & falsepositverateData$Power13==2|
falsepositverateData$Power2==2 & falsepositverateData$Power3==1 & falsepositverateData$Power12==2 & falsepositverateData$Power13==2|
falsepositverateData$Power2==2 & falsepositverateData$Power3==2 & falsepositverateData$Power12==2 & falsepositverateData$Power13==2|
falsepositverateData$Power2==2 & falsepositverateData$Power3==2 & falsepositverateData$Power12==1 & falsepositverateData$Power13==2|
falsepositverateData$Power2==2 & falsepositverateData$Power3==2 & falsepositverateData$Power12==2 & falsepositverateData$Power13==1,]
falsepositverateData$rate=ifelse(falsepositverateData$f..>0,1,0)
falsepostive=falsepositverateData[,list(mean=mean(rate),FPR=mean(f..)),by=c("Main","Set","Type","SampleSize","OutlierExclusion","Correlation","IndependentVariables","DV")]
falsepostive$Main[falsepostive$Main==1]<-"Main = TRUE"
falsepostive$Main[falsepostive$Main==2]<-"Main = FALSE"
falsepostive$Type[falsepostive$Type==1]<-"h1=Normal, Co=Normal"
falsepostive$Type[falsepostive$Type==2]<-"h1=Binary, Co=Binary"
falsepostive$Type[falsepostive$Type==1]<-"h1=Normal, Co=Normal"
falsepostive$Type[falsepostive$Type==2]<-"h1=Binary, Co=Binary"
falsepostive$Type[falsepostive$Type==3]<-"h1=Normal, Co=Binary"
falsepostive$Type[falsepostive$Type==4]<-"h1=Binary, Co=Normal"
falsepostive$Type[falsepostive$Type==5]<-"h1=Binary, Co=Binary Effect"
falsepostive$Type[falsepostive$Type==6]<-"h1=Normal, Co=Binary Effect"
falsepostive$OutlierExclusion[falsepostive$OutlierExclusion==2]<-"FALSE"
falsepostive$OutlierExclusion[falsepostive$OutlierExclusion==1]<-"TRUE"
falsepostive$Set <- factor(falsepostive$Set,levels = c("Ma", "HCI", "CCI", "Ma + HCI","Ma + CCI","HCI + CCI","Ma + HCI + CCI"))
falsepostive$Pr<-as.numeric(falsepostive$mean)
## Figure 1A
# False-positive rate for each set with just two covariates and a sample size of 200
figuredata<-falsepostive[falsepostive$SampleSize==200 & falsepostive$OutlierExclusion=="FALSE" & falsepostive$IndependentVariables==1 & falsepostive$Correlation==0.2 & falsepostive$DV==1
& falsepostive$Type!="h1=Normal, Co=Binary" & falsepostive$Type!="h1=Binary, Co=Normal"
& falsepostive$Type!="h1=Binary, Co=Binary Effect" & falsepostive$Type!="h1=Normal, Co=Binary Effect",]
figuredata
install.packages("ggthemes")
library(ggthemes)
ggthemes
help("ggthemes")
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
library(dplyr)
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
runApp('~/GitHub/P-hacking-sim/R/shiny')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dalgaard',
token='58BF2D14D98751AEFC8FCC65AEFDE2C7',
secret='0nkjcpu/04M3VgrRIecQF8u5J1ylsY7te/9BdzyC')
